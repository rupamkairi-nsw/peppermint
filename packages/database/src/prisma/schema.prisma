generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id           String  @id @default(uuid())
  name         String
  clientId     String
  clientSecret String
  active       Boolean
  issuer       String?
  tenantId     String?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                           String         @id @default(uuid())
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @default(now())
  name                         String
  password                     String?
  email                        String         @unique
  image                        String?
  emailVerified                Boolean?
  isAdmin                      Boolean        @default(false)
  language                     String?        @default("en")
  notify_ticket_created        Boolean        @default(true)
  notify_ticket_status_changed Boolean        @default(true)
  notify_ticket_comments       Boolean        @default(true)
  notify_ticket_assigned       Boolean        @default(true)
  todos                        Todos[]
  tickets                      Ticket[]
  file                         UserFile[]
  notes                        Notes[]
  Team                         Team?          @relation(fields: [teamId], references: [id])
  teamId                       String?
  Comment                      Comment[]
  Account                      Account[]
  Session                      Session[]
  TimeTracking                 TimeTracking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String

  members User[]
  Ticket  Ticket[]
}

model Ticket {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  name       String?
  title      String
  detail     String?
  email      String?
  note       String?
  isComplete Boolean
  priority   String
  linked     Json?
  fromImap   Boolean
  Number     Int          @default(autoincrement())
  status     TicketStatus @default(needs_support)

  TicketFile   TicketFile[]
  Comment      Comment[]
  TimeTracking TimeTracking[]

  team       Team?   @relation(fields: [teamId], references: [id])
  teamId     String?
  assignedTo User?   @relation(fields: [userId], references: [id])
  client     Client? @relation(fields: [clientId], references: [id])
  clientId   String?
  userId     String?
}

model TimeTracking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  comment   String?
  time      Int

  user     User?   @relation(fields: [userId], references: [id])
  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
  userId   String?
  ticketId String?
  ticket   Ticket? @relation(fields: [ticketId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  text   String
  public Boolean @default(false)

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model Client {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  name         String
  email        String         @unique
  contactName  String
  number       String?
  notes        String?
  tickets      Ticket[]
  active       Boolean        @default(true)
  TimeTracking TimeTracking[]
}

model UserFile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  filename  String
  path      String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model TicketFile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  filename  String
  path      String

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model Notes {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  title      String
  note       String
  Favourited Boolean  @default(false)

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String
}

model Todos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String
  done      Boolean  @default(false)

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String
}

model Webhooks {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  url       String
  type      Hook
  active    Boolean
  secret    String?
  createdBy String
}

model Discord {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  secret    String?
  url       String
  active    Boolean  @default(false)
}

model Slack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  secret    String?
  url       String
  active    Boolean  @default(false)
}

model Email {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  active    Boolean  @default(false)
  user      String
  pass      String
  secure    Boolean  @default(false)
  host      String
  reply     String
  port      String
}

model Config {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  notifications Json // Array of service names and an active field of TRUE OR FALSE
}

model Imap_Email {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  from    String?
  subject String?
  body    String?
  text    String?
  html    String?

  EmailQueue   EmailQueue? @relation(fields: [emailQueueId], references: [id])
  emailQueueId String?
}

model EmailQueue {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  username String
  password String
  hostname String
  tls      Boolean @default(true)
  teams    Json?

  imap Imap_Email[]
}

enum Hook {
  ticket_created
  ticket_status_changed
}

enum TicketStatus {
  needs_support
  in_progress
  in_review
  done
}
